Metadata-Version: 2.1
Name: Pyment
Version: 0.3.3
Summary: Generate/convert automatically the docstrings from code signature
Home-page: https://github.com/dadadel/pyment
Author: A. Daouzli
Author-email: dadel@hadoly.fr
License: GPLv3
Keywords: pyment docstring numpydoc googledoc restructuredtext epydoc epytext javadoc development generate auto
Platform: any
Classifier: Intended Audience :: Developers
Classifier: Topic :: Documentation
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.0
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Description-Content-Type: text/x-rst

pyment
======

Create, update or convert docstrings in existing Python files, managing several styles.

.. contents:: :local:

Description
-----------

This Python (2.7+/3+, or 2.6 if installed _argparser_) program intends to help Python programmers to enhance inside code documentation using docstrings.
It is useful for code not well documented, or code without docstrings, or some not yet or partially documented code, or a mix of all of this :-)
It can be helpful also to harmonize or change a project docstring style format.

It will parse one or several python scripts and retrieve existing docstrings.
Then, for all found functions/methods/classes, it will generate formatted docstrings with parameters, default values,...

At the end, patches are generated for each file. Then, man can apply the patches to the initial scripts.
An option allow to update the files directly without generating patches.
It is also possible to generate the python file with the new docstrings, or to retrieve only the docstrings...

Currently, the managed styles in input/output are javadoc, one variant of reST (re-Structured Text, used by Sphinx), numpydoc, google docstrings, groups (other grouped style).

You can also configure some settings via the command line or a configuration
file.

To get further information please refer to the `documentation <https://github.com/dadadel/pyment/blob/master/doc/sphinx/source/pyment.rst>`_.

The tool, at the time, offer to generate patches or get a list of the new docstrings (created or converted).

You can contact the developer *dadel* and speak about the project on **IRC** **Freenode**'s channel **#pyment**.

Start quickly
-------------
- get and install:

.. code-block:: sh

        $ git install pyment
        or
        $ pip install git+https://github.com/dadadel/pyment.git

- run from the command line:

.. code-block:: sh

        $ pyment  myfile.py    # will generate a patch
        $ pyment -w myfile.py  # will overwrite the file

or

.. code-block:: sh

        $ pyment  my/folder/

- get help:

.. code-block:: sh

        $ pyment -h

- run from a script:

.. code-block:: python

        import os
        from pyment import PyComment

        filename = 'test.py'

        c = PyComment(filename)
        c.proceed()
        c.diff_to_file(os.path.basename(filename) + ".patch")
        for s in c.get_output_docs():
            print(s)

Example
-------

Here is a full example using Pyment to generate a patch and then apply the patch.

Let's consider a file *test.py* with following content:

.. code-block:: python

        def func(param1=True, param2='default val'):
            '''Description of func with docstring groups style.

            Params:
                param1 - descr of param1 that has True for default value.
                param2 - descr of param2

            Returns:
                some value

            Raises:
                keyError: raises key exception
                TypeError: raises type exception

            '''
            pass

        class A:
            def method(self, param1, param2=None):
                pass

Now let's use Pyment:

.. code-block:: sh

        $ pyment test.py

Using Pyment without any argument will autodetect the docstrings formats and generate a patch using the reStructured Text format.
So the previous command has generated the file *test.py.patch* with following content:

.. code-block:: patch

        # Patch generated by Pyment v0.2.0

        --- a/test.py
        +++ b/test.py
        @@ -1,20 +1,22 @@
         def func(param1=True, param2='default val'):
        -    '''Description of func with docstring groups style.
        +    """Description of func with docstring groups style.

        -    Params: 
        -        param1 - descr of param1 that has True for default value.
        -        param2 - descr of param2
        +    :param param1: descr of param1 that has True for default value
        +    :param param2: descr of param2 (Default value = 'default val')
        +    :returns: some value
        +    :raises keyError: raises key exception
        +    :raises TypeError: raises type exception

        -    Returns:
        -        some value
        -
        -    Raises:
        -        keyError: raises key exception
        -        TypeError: raises type exception
        -
        -    '''
        +    """
             pass

         class A:
        +    """ """
             def method(self, param1, param2=None):
        +        """
        +
        +        :param param1: 
        +        :param param2:  (Default value = None)
        +
        +        """
                 pass

Let's finally apply the patch with the following command:

.. code-block:: sh

        $ patch -p1 < test.py.patch

Now the original *test.py* was updated and its content is now:

.. code-block:: python

        def func(param1=True, param2='default val'):
            """Description of func with docstring groups style.

            :param param1: descr of param1 that has True for default value
            :param param2: descr of param2 (Default value = 'default val')
            :returns: some value
            :raises keyError: raises key exception
            :raises TypeError: raises type exception

            """
            pass

        class A:
            """ """
            def method(self, param1, param2=None):
                """

                :param param1: 
                :param param2:  (Default value = None)

                """
                pass

Also refer to the files `example.py.patch <https://github.com/dadadel/pyment/blob/master/example.py.patch>`_ or `example_numpy.py.patch <https://github.com/dadadel/pyment/blob/master/example_numpy.py.patch>`_ to see some other results that can be obtained processing the file `example.py <https://github.com/dadadel/pyment/blob/master/example.py>`_ 


Offer a coffee or a beer
------------------------

If you enjoyed this free software, and want to thank me, you can offer me some
bitcoins for a coffee, a beer, or more, I would be happy :)

Here's my address for bitcoins : 1Kz5bu4HuRtwbjzopN6xWSVsmtTDK6Kb89



